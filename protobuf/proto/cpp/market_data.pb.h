// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_market_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto;
namespace Proto3 {
namespace MarketData {
class Decimal;
class DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class Depth;
class DepthDefaultTypeInternal;
extern DepthDefaultTypeInternal _Depth_default_instance_;
class DepthQuote;
class DepthQuoteDefaultTypeInternal;
extern DepthQuoteDefaultTypeInternal _DepthQuote_default_instance_;
class Depth_VolumeByExchangesEntry_DoNotUse;
class Depth_VolumeByExchangesEntry_DoNotUseDefaultTypeInternal;
extern Depth_VolumeByExchangesEntry_DoNotUseDefaultTypeInternal _Depth_VolumeByExchangesEntry_DoNotUse_default_instance_;
class KlineData;
class KlineDataDefaultTypeInternal;
extern KlineDataDefaultTypeInternal _KlineData_default_instance_;
class TradeData;
class TradeDataDefaultTypeInternal;
extern TradeDataDefaultTypeInternal _TradeData_default_instance_;
}  // namespace MarketData
}  // namespace Proto3
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto3::MarketData::Decimal* Arena::CreateMaybeMessage<::Proto3::MarketData::Decimal>(Arena*);
template<> ::Proto3::MarketData::Depth* Arena::CreateMaybeMessage<::Proto3::MarketData::Depth>(Arena*);
template<> ::Proto3::MarketData::DepthQuote* Arena::CreateMaybeMessage<::Proto3::MarketData::DepthQuote>(Arena*);
template<> ::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse* Arena::CreateMaybeMessage<::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse>(Arena*);
template<> ::Proto3::MarketData::KlineData* Arena::CreateMaybeMessage<::Proto3::MarketData::KlineData>(Arena*);
template<> ::Proto3::MarketData::TradeData* Arena::CreateMaybeMessage<::Proto3::MarketData::TradeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto3 {
namespace MarketData {

// ===================================================================

class Decimal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.Decimal) */ {
 public:
  inline Decimal() : Decimal(nullptr) {}
  virtual ~Decimal();

  Decimal(const Decimal& from);
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decimal& operator=(Decimal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decimal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Decimal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decimal* New() const final {
    return CreateMaybeMessage<Decimal>(nullptr);
  }

  Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.Decimal";
  }
  protected:
  explicit Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kPreciseFieldNumber = 2,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 precise = 2;
  void clear_precise();
  ::PROTOBUF_NAMESPACE_ID::uint32 precise() const;
  void set_precise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_precise() const;
  void _internal_set_precise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.Decimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 precise_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Depth_VolumeByExchangesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Depth_VolumeByExchangesEntry_DoNotUse, 
    std::string, ::Proto3::MarketData::Decimal,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Depth_VolumeByExchangesEntry_DoNotUse, 
    std::string, ::Proto3::MarketData::Decimal,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Depth_VolumeByExchangesEntry_DoNotUse();
  explicit Depth_VolumeByExchangesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Depth_VolumeByExchangesEntry_DoNotUse& other);
  static const Depth_VolumeByExchangesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Depth_VolumeByExchangesEntry_DoNotUse*>(&_Depth_VolumeByExchangesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Proto3.MarketData.Depth.VolumeByExchangesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Depth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.Depth) */ {
 public:
  inline Depth() : Depth(nullptr) {}
  virtual ~Depth();

  Depth(const Depth& from);
  Depth(Depth&& from) noexcept
    : Depth() {
    *this = ::std::move(from);
  }

  inline Depth& operator=(const Depth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Depth& operator=(Depth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Depth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Depth* internal_default_instance() {
    return reinterpret_cast<const Depth*>(
               &_Depth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Depth& a, Depth& b) {
    a.Swap(&b);
  }
  inline void Swap(Depth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Depth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Depth* New() const final {
    return CreateMaybeMessage<Depth>(nullptr);
  }

  Depth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Depth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Depth& from);
  void MergeFrom(const Depth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Depth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.Depth";
  }
  protected:
  explicit Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVolumeByExchangesFieldNumber = 3,
    kPriceFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // map<string, .Proto3.MarketData.Decimal> volume_by_exchanges = 3;
  int volume_by_exchanges_size() const;
  private:
  int _internal_volume_by_exchanges_size() const;
  public:
  void clear_volume_by_exchanges();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >&
      _internal_volume_by_exchanges() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >*
      _internal_mutable_volume_by_exchanges();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >&
      volume_by_exchanges() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >*
      mutable_volume_by_exchanges();

  // .Proto3.MarketData.Decimal price = 1;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::Proto3::MarketData::Decimal& price() const;
  ::Proto3::MarketData::Decimal* release_price();
  ::Proto3::MarketData::Decimal* mutable_price();
  void set_allocated_price(::Proto3::MarketData::Decimal* price);
  private:
  const ::Proto3::MarketData::Decimal& _internal_price() const;
  ::Proto3::MarketData::Decimal* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::Proto3::MarketData::Decimal* price);
  ::Proto3::MarketData::Decimal* unsafe_arena_release_price();

  // .Proto3.MarketData.Decimal volume = 2;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::Proto3::MarketData::Decimal& volume() const;
  ::Proto3::MarketData::Decimal* release_volume();
  ::Proto3::MarketData::Decimal* mutable_volume();
  void set_allocated_volume(::Proto3::MarketData::Decimal* volume);
  private:
  const ::Proto3::MarketData::Decimal& _internal_volume() const;
  ::Proto3::MarketData::Decimal* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::Proto3::MarketData::Decimal* volume);
  ::Proto3::MarketData::Decimal* unsafe_arena_release_volume();

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.Depth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Depth_VolumeByExchangesEntry_DoNotUse,
      std::string, ::Proto3::MarketData::Decimal,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > volume_by_exchanges_;
  ::Proto3::MarketData::Decimal* price_;
  ::Proto3::MarketData::Decimal* volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DepthQuote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.DepthQuote) */ {
 public:
  inline DepthQuote() : DepthQuote(nullptr) {}
  virtual ~DepthQuote();

  DepthQuote(const DepthQuote& from);
  DepthQuote(DepthQuote&& from) noexcept
    : DepthQuote() {
    *this = ::std::move(from);
  }

  inline DepthQuote& operator=(const DepthQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthQuote& operator=(DepthQuote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthQuote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthQuote* internal_default_instance() {
    return reinterpret_cast<const DepthQuote*>(
               &_DepthQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DepthQuote& a, DepthQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthQuote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthQuote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthQuote* New() const final {
    return CreateMaybeMessage<DepthQuote>(nullptr);
  }

  DepthQuote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthQuote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthQuote& from);
  void MergeFrom(const DepthQuote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthQuote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.DepthQuote";
  }
  protected:
  explicit DepthQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsksFieldNumber = 11,
    kBidsFieldNumber = 12,
    kExchangeFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kSequenceNoFieldNumber = 3,
    kOriginTimeFieldNumber = 4,
    kArriveTimeFieldNumber = 5,
    kServerTimeFieldNumber = 6,
    kPricePreciseFieldNumber = 7,
    kVolumePreciseFieldNumber = 8,
    kAmountPreciseFieldNumber = 9,
    kIsSnapFieldNumber = 10,
  };
  // repeated .Proto3.MarketData.Depth asks = 11;
  int asks_size() const;
  private:
  int _internal_asks_size() const;
  public:
  void clear_asks();
  ::Proto3::MarketData::Depth* mutable_asks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth >*
      mutable_asks();
  private:
  const ::Proto3::MarketData::Depth& _internal_asks(int index) const;
  ::Proto3::MarketData::Depth* _internal_add_asks();
  public:
  const ::Proto3::MarketData::Depth& asks(int index) const;
  ::Proto3::MarketData::Depth* add_asks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth >&
      asks() const;

  // repeated .Proto3.MarketData.Depth bids = 12;
  int bids_size() const;
  private:
  int _internal_bids_size() const;
  public:
  void clear_bids();
  ::Proto3::MarketData::Depth* mutable_bids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth >*
      mutable_bids();
  private:
  const ::Proto3::MarketData::Depth& _internal_bids(int index) const;
  ::Proto3::MarketData::Depth* _internal_add_bids();
  public:
  const ::Proto3::MarketData::Depth& bids(int index) const;
  ::Proto3::MarketData::Depth* add_bids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth >&
      bids() const;

  // string exchange = 1;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // uint64 sequence_no = 3;
  void clear_sequence_no();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_no() const;
  void set_sequence_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_no() const;
  void _internal_set_sequence_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 origin_time = 4;
  void clear_origin_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 origin_time() const;
  void set_origin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_origin_time() const;
  void _internal_set_origin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 arrive_time = 5;
  void clear_arrive_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 arrive_time() const;
  void set_arrive_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_arrive_time() const;
  void _internal_set_arrive_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 server_time = 6;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 price_precise = 7;
  void clear_price_precise();
  ::PROTOBUF_NAMESPACE_ID::uint32 price_precise() const;
  void set_price_precise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price_precise() const;
  void _internal_set_price_precise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 volume_precise = 8;
  void clear_volume_precise();
  ::PROTOBUF_NAMESPACE_ID::uint32 volume_precise() const;
  void set_volume_precise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volume_precise() const;
  void _internal_set_volume_precise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 amount_precise = 9;
  void clear_amount_precise();
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_precise() const;
  void set_amount_precise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amount_precise() const;
  void _internal_set_amount_precise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_snap = 10;
  void clear_is_snap();
  bool is_snap() const;
  void set_is_snap(bool value);
  private:
  bool _internal_is_snap() const;
  void _internal_set_is_snap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.DepthQuote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth > asks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth > bids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_no_;
  ::PROTOBUF_NAMESPACE_ID::uint64 origin_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 arrive_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_precise_;
  ::PROTOBUF_NAMESPACE_ID::uint32 volume_precise_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_precise_;
  bool is_snap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class KlineData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.KlineData) */ {
 public:
  inline KlineData() : KlineData(nullptr) {}
  virtual ~KlineData();

  KlineData(const KlineData& from);
  KlineData(KlineData&& from) noexcept
    : KlineData() {
    *this = ::std::move(from);
  }

  inline KlineData& operator=(const KlineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline KlineData& operator=(KlineData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KlineData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KlineData* internal_default_instance() {
    return reinterpret_cast<const KlineData*>(
               &_KlineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KlineData& a, KlineData& b) {
    a.Swap(&b);
  }
  inline void Swap(KlineData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KlineData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KlineData* New() const final {
    return CreateMaybeMessage<KlineData>(nullptr);
  }

  KlineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KlineData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KlineData& from);
  void MergeFrom(const KlineData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KlineData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.KlineData";
  }
  protected:
  explicit KlineData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kPxOpenFieldNumber = 4,
    kPxHighFieldNumber = 5,
    kPxLowFieldNumber = 6,
    kPxCloseFieldNumber = 7,
    kVolumeFieldNumber = 8,
    kTimeFieldNumber = 1,
    kResolutionFieldNumber = 9,
  };
  // string exchange = 2;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // .Proto3.MarketData.Decimal px_open = 4;
  bool has_px_open() const;
  private:
  bool _internal_has_px_open() const;
  public:
  void clear_px_open();
  const ::Proto3::MarketData::Decimal& px_open() const;
  ::Proto3::MarketData::Decimal* release_px_open();
  ::Proto3::MarketData::Decimal* mutable_px_open();
  void set_allocated_px_open(::Proto3::MarketData::Decimal* px_open);
  private:
  const ::Proto3::MarketData::Decimal& _internal_px_open() const;
  ::Proto3::MarketData::Decimal* _internal_mutable_px_open();
  public:
  void unsafe_arena_set_allocated_px_open(
      ::Proto3::MarketData::Decimal* px_open);
  ::Proto3::MarketData::Decimal* unsafe_arena_release_px_open();

  // .Proto3.MarketData.Decimal px_high = 5;
  bool has_px_high() const;
  private:
  bool _internal_has_px_high() const;
  public:
  void clear_px_high();
  const ::Proto3::MarketData::Decimal& px_high() const;
  ::Proto3::MarketData::Decimal* release_px_high();
  ::Proto3::MarketData::Decimal* mutable_px_high();
  void set_allocated_px_high(::Proto3::MarketData::Decimal* px_high);
  private:
  const ::Proto3::MarketData::Decimal& _internal_px_high() const;
  ::Proto3::MarketData::Decimal* _internal_mutable_px_high();
  public:
  void unsafe_arena_set_allocated_px_high(
      ::Proto3::MarketData::Decimal* px_high);
  ::Proto3::MarketData::Decimal* unsafe_arena_release_px_high();

  // .Proto3.MarketData.Decimal px_low = 6;
  bool has_px_low() const;
  private:
  bool _internal_has_px_low() const;
  public:
  void clear_px_low();
  const ::Proto3::MarketData::Decimal& px_low() const;
  ::Proto3::MarketData::Decimal* release_px_low();
  ::Proto3::MarketData::Decimal* mutable_px_low();
  void set_allocated_px_low(::Proto3::MarketData::Decimal* px_low);
  private:
  const ::Proto3::MarketData::Decimal& _internal_px_low() const;
  ::Proto3::MarketData::Decimal* _internal_mutable_px_low();
  public:
  void unsafe_arena_set_allocated_px_low(
      ::Proto3::MarketData::Decimal* px_low);
  ::Proto3::MarketData::Decimal* unsafe_arena_release_px_low();

  // .Proto3.MarketData.Decimal px_close = 7;
  bool has_px_close() const;
  private:
  bool _internal_has_px_close() const;
  public:
  void clear_px_close();
  const ::Proto3::MarketData::Decimal& px_close() const;
  ::Proto3::MarketData::Decimal* release_px_close();
  ::Proto3::MarketData::Decimal* mutable_px_close();
  void set_allocated_px_close(::Proto3::MarketData::Decimal* px_close);
  private:
  const ::Proto3::MarketData::Decimal& _internal_px_close() const;
  ::Proto3::MarketData::Decimal* _internal_mutable_px_close();
  public:
  void unsafe_arena_set_allocated_px_close(
      ::Proto3::MarketData::Decimal* px_close);
  ::Proto3::MarketData::Decimal* unsafe_arena_release_px_close();

  // .Proto3.MarketData.Decimal volume = 8;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::Proto3::MarketData::Decimal& volume() const;
  ::Proto3::MarketData::Decimal* release_volume();
  ::Proto3::MarketData::Decimal* mutable_volume();
  void set_allocated_volume(::Proto3::MarketData::Decimal* volume);
  private:
  const ::Proto3::MarketData::Decimal& _internal_volume() const;
  ::Proto3::MarketData::Decimal* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::Proto3::MarketData::Decimal* volume);
  ::Proto3::MarketData::Decimal* unsafe_arena_release_volume();

  // uint64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 resolution = 9;
  void clear_resolution();
  ::PROTOBUF_NAMESPACE_ID::uint32 resolution() const;
  void set_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_resolution() const;
  void _internal_set_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.KlineData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::Proto3::MarketData::Decimal* px_open_;
  ::Proto3::MarketData::Decimal* px_high_;
  ::Proto3::MarketData::Decimal* px_low_;
  ::Proto3::MarketData::Decimal* px_close_;
  ::Proto3::MarketData::Decimal* volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TradeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.TradeData) */ {
 public:
  inline TradeData() : TradeData(nullptr) {}
  virtual ~TradeData();

  TradeData(const TradeData& from);
  TradeData(TradeData&& from) noexcept
    : TradeData() {
    *this = ::std::move(from);
  }

  inline TradeData& operator=(const TradeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeData& operator=(TradeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeData* internal_default_instance() {
    return reinterpret_cast<const TradeData*>(
               &_TradeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TradeData& a, TradeData& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeData* New() const final {
    return CreateMaybeMessage<TradeData>(nullptr);
  }

  TradeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeData& from);
  void MergeFrom(const TradeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.TradeData";
  }
  protected:
  explicit TradeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 4,
    kExchangeFieldNumber = 5,
    kPriceFieldNumber = 2,
    kVolumeFieldNumber = 3,
    kTimeFieldNumber = 1,
  };
  // string symbol = 4;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string exchange = 5;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // .Proto3.MarketData.Decimal price = 2;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::Proto3::MarketData::Decimal& price() const;
  ::Proto3::MarketData::Decimal* release_price();
  ::Proto3::MarketData::Decimal* mutable_price();
  void set_allocated_price(::Proto3::MarketData::Decimal* price);
  private:
  const ::Proto3::MarketData::Decimal& _internal_price() const;
  ::Proto3::MarketData::Decimal* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::Proto3::MarketData::Decimal* price);
  ::Proto3::MarketData::Decimal* unsafe_arena_release_price();

  // .Proto3.MarketData.Decimal volume = 3;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::Proto3::MarketData::Decimal& volume() const;
  ::Proto3::MarketData::Decimal* release_volume();
  ::Proto3::MarketData::Decimal* mutable_volume();
  void set_allocated_volume(::Proto3::MarketData::Decimal* volume);
  private:
  const ::Proto3::MarketData::Decimal& _internal_volume() const;
  ::Proto3::MarketData::Decimal* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::Proto3::MarketData::Decimal* volume);
  ::Proto3::MarketData::Decimal* unsafe_arena_release_volume();

  // uint64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.TradeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::Proto3::MarketData::Decimal* price_;
  ::Proto3::MarketData::Decimal* volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Decimal

// uint64 value = 1;
inline void Decimal::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Decimal::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Decimal::value() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Decimal.value)
  return _internal_value();
}
inline void Decimal::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void Decimal::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Decimal.value)
}

// uint32 precise = 2;
inline void Decimal::clear_precise() {
  precise_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Decimal::_internal_precise() const {
  return precise_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Decimal::precise() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Decimal.precise)
  return _internal_precise();
}
inline void Decimal::_internal_set_precise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  precise_ = value;
}
inline void Decimal::set_precise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_precise(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Decimal.precise)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Depth

// .Proto3.MarketData.Decimal price = 1;
inline bool Depth::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool Depth::has_price() const {
  return _internal_has_price();
}
inline void Depth::clear_price() {
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::Proto3::MarketData::Decimal& Depth::_internal_price() const {
  const ::Proto3::MarketData::Decimal* p = price_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto3::MarketData::Decimal*>(
      &::Proto3::MarketData::_Decimal_default_instance_);
}
inline const ::Proto3::MarketData::Decimal& Depth::price() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Depth.price)
  return _internal_price();
}
inline void Depth::unsafe_arena_set_allocated_price(
    ::Proto3::MarketData::Decimal* price) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.Depth.price)
}
inline ::Proto3::MarketData::Decimal* Depth::release_price() {
  
  ::Proto3::MarketData::Decimal* temp = price_;
  price_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto3::MarketData::Decimal* Depth::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Depth.price)
  
  ::Proto3::MarketData::Decimal* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::Proto3::MarketData::Decimal* Depth::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto3::MarketData::Decimal>(GetArena());
    price_ = p;
  }
  return price_;
}
inline ::Proto3::MarketData::Decimal* Depth::mutable_price() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Depth.price)
  return _internal_mutable_price();
}
inline void Depth::set_allocated_price(::Proto3::MarketData::Decimal* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Depth.price)
}

// .Proto3.MarketData.Decimal volume = 2;
inline bool Depth::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool Depth::has_volume() const {
  return _internal_has_volume();
}
inline void Depth::clear_volume() {
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
inline const ::Proto3::MarketData::Decimal& Depth::_internal_volume() const {
  const ::Proto3::MarketData::Decimal* p = volume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto3::MarketData::Decimal*>(
      &::Proto3::MarketData::_Decimal_default_instance_);
}
inline const ::Proto3::MarketData::Decimal& Depth::volume() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Depth.volume)
  return _internal_volume();
}
inline void Depth::unsafe_arena_set_allocated_volume(
    ::Proto3::MarketData::Decimal* volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.Depth.volume)
}
inline ::Proto3::MarketData::Decimal* Depth::release_volume() {
  
  ::Proto3::MarketData::Decimal* temp = volume_;
  volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto3::MarketData::Decimal* Depth::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Depth.volume)
  
  ::Proto3::MarketData::Decimal* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::Proto3::MarketData::Decimal* Depth::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto3::MarketData::Decimal>(GetArena());
    volume_ = p;
  }
  return volume_;
}
inline ::Proto3::MarketData::Decimal* Depth::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Depth.volume)
  return _internal_mutable_volume();
}
inline void Depth::set_allocated_volume(::Proto3::MarketData::Decimal* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volume_;
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volume);
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Depth.volume)
}

// map<string, .Proto3.MarketData.Decimal> volume_by_exchanges = 3;
inline int Depth::_internal_volume_by_exchanges_size() const {
  return volume_by_exchanges_.size();
}
inline int Depth::volume_by_exchanges_size() const {
  return _internal_volume_by_exchanges_size();
}
inline void Depth::clear_volume_by_exchanges() {
  volume_by_exchanges_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >&
Depth::_internal_volume_by_exchanges() const {
  return volume_by_exchanges_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >&
Depth::volume_by_exchanges() const {
  // @@protoc_insertion_point(field_map:Proto3.MarketData.Depth.volume_by_exchanges)
  return _internal_volume_by_exchanges();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >*
Depth::_internal_mutable_volume_by_exchanges() {
  return volume_by_exchanges_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >*
Depth::mutable_volume_by_exchanges() {
  // @@protoc_insertion_point(field_mutable_map:Proto3.MarketData.Depth.volume_by_exchanges)
  return _internal_mutable_volume_by_exchanges();
}

// -------------------------------------------------------------------

// DepthQuote

// string exchange = 1;
inline void DepthQuote::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepthQuote::exchange() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.exchange)
  return _internal_exchange();
}
inline void DepthQuote::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.exchange)
}
inline std::string* DepthQuote::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.DepthQuote.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& DepthQuote::_internal_exchange() const {
  return exchange_.Get();
}
inline void DepthQuote::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthQuote::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.DepthQuote.exchange)
}
inline void DepthQuote::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.DepthQuote.exchange)
}
inline void DepthQuote::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.DepthQuote.exchange)
}
inline std::string* DepthQuote::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthQuote::release_exchange() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.DepthQuote.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthQuote::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.DepthQuote.exchange)
}

// string symbol = 2;
inline void DepthQuote::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepthQuote::symbol() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.symbol)
  return _internal_symbol();
}
inline void DepthQuote::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.symbol)
}
inline std::string* DepthQuote::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.DepthQuote.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& DepthQuote::_internal_symbol() const {
  return symbol_.Get();
}
inline void DepthQuote::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthQuote::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.DepthQuote.symbol)
}
inline void DepthQuote::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.DepthQuote.symbol)
}
inline void DepthQuote::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.DepthQuote.symbol)
}
inline std::string* DepthQuote::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthQuote::release_symbol() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.DepthQuote.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthQuote::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.DepthQuote.symbol)
}

// uint64 sequence_no = 3;
inline void DepthQuote::clear_sequence_no() {
  sequence_no_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepthQuote::_internal_sequence_no() const {
  return sequence_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepthQuote::sequence_no() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.sequence_no)
  return _internal_sequence_no();
}
inline void DepthQuote::_internal_set_sequence_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_no_ = value;
}
inline void DepthQuote::set_sequence_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_no(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.sequence_no)
}

// uint64 origin_time = 4;
inline void DepthQuote::clear_origin_time() {
  origin_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepthQuote::_internal_origin_time() const {
  return origin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepthQuote::origin_time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.origin_time)
  return _internal_origin_time();
}
inline void DepthQuote::_internal_set_origin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  origin_time_ = value;
}
inline void DepthQuote::set_origin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_origin_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.origin_time)
}

// uint64 arrive_time = 5;
inline void DepthQuote::clear_arrive_time() {
  arrive_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepthQuote::_internal_arrive_time() const {
  return arrive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepthQuote::arrive_time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.arrive_time)
  return _internal_arrive_time();
}
inline void DepthQuote::_internal_set_arrive_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  arrive_time_ = value;
}
inline void DepthQuote::set_arrive_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_arrive_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.arrive_time)
}

// uint64 server_time = 6;
inline void DepthQuote::clear_server_time() {
  server_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepthQuote::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepthQuote::server_time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.server_time)
  return _internal_server_time();
}
inline void DepthQuote::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_time_ = value;
}
inline void DepthQuote::set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.server_time)
}

// uint32 price_precise = 7;
inline void DepthQuote::clear_price_precise() {
  price_precise_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthQuote::_internal_price_precise() const {
  return price_precise_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthQuote::price_precise() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.price_precise)
  return _internal_price_precise();
}
inline void DepthQuote::_internal_set_price_precise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_precise_ = value;
}
inline void DepthQuote::set_price_precise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price_precise(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.price_precise)
}

// uint32 volume_precise = 8;
inline void DepthQuote::clear_volume_precise() {
  volume_precise_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthQuote::_internal_volume_precise() const {
  return volume_precise_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthQuote::volume_precise() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.volume_precise)
  return _internal_volume_precise();
}
inline void DepthQuote::_internal_set_volume_precise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  volume_precise_ = value;
}
inline void DepthQuote::set_volume_precise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_volume_precise(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.volume_precise)
}

// uint32 amount_precise = 9;
inline void DepthQuote::clear_amount_precise() {
  amount_precise_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthQuote::_internal_amount_precise() const {
  return amount_precise_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthQuote::amount_precise() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.amount_precise)
  return _internal_amount_precise();
}
inline void DepthQuote::_internal_set_amount_precise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  amount_precise_ = value;
}
inline void DepthQuote::set_amount_precise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_amount_precise(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.amount_precise)
}

// bool is_snap = 10;
inline void DepthQuote::clear_is_snap() {
  is_snap_ = false;
}
inline bool DepthQuote::_internal_is_snap() const {
  return is_snap_;
}
inline bool DepthQuote::is_snap() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.is_snap)
  return _internal_is_snap();
}
inline void DepthQuote::_internal_set_is_snap(bool value) {
  
  is_snap_ = value;
}
inline void DepthQuote::set_is_snap(bool value) {
  _internal_set_is_snap(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.DepthQuote.is_snap)
}

// repeated .Proto3.MarketData.Depth asks = 11;
inline int DepthQuote::_internal_asks_size() const {
  return asks_.size();
}
inline int DepthQuote::asks_size() const {
  return _internal_asks_size();
}
inline void DepthQuote::clear_asks() {
  asks_.Clear();
}
inline ::Proto3::MarketData::Depth* DepthQuote::mutable_asks(int index) {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.DepthQuote.asks)
  return asks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth >*
DepthQuote::mutable_asks() {
  // @@protoc_insertion_point(field_mutable_list:Proto3.MarketData.DepthQuote.asks)
  return &asks_;
}
inline const ::Proto3::MarketData::Depth& DepthQuote::_internal_asks(int index) const {
  return asks_.Get(index);
}
inline const ::Proto3::MarketData::Depth& DepthQuote::asks(int index) const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.asks)
  return _internal_asks(index);
}
inline ::Proto3::MarketData::Depth* DepthQuote::_internal_add_asks() {
  return asks_.Add();
}
inline ::Proto3::MarketData::Depth* DepthQuote::add_asks() {
  // @@protoc_insertion_point(field_add:Proto3.MarketData.DepthQuote.asks)
  return _internal_add_asks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth >&
DepthQuote::asks() const {
  // @@protoc_insertion_point(field_list:Proto3.MarketData.DepthQuote.asks)
  return asks_;
}

// repeated .Proto3.MarketData.Depth bids = 12;
inline int DepthQuote::_internal_bids_size() const {
  return bids_.size();
}
inline int DepthQuote::bids_size() const {
  return _internal_bids_size();
}
inline void DepthQuote::clear_bids() {
  bids_.Clear();
}
inline ::Proto3::MarketData::Depth* DepthQuote::mutable_bids(int index) {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.DepthQuote.bids)
  return bids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth >*
DepthQuote::mutable_bids() {
  // @@protoc_insertion_point(field_mutable_list:Proto3.MarketData.DepthQuote.bids)
  return &bids_;
}
inline const ::Proto3::MarketData::Depth& DepthQuote::_internal_bids(int index) const {
  return bids_.Get(index);
}
inline const ::Proto3::MarketData::Depth& DepthQuote::bids(int index) const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.DepthQuote.bids)
  return _internal_bids(index);
}
inline ::Proto3::MarketData::Depth* DepthQuote::_internal_add_bids() {
  return bids_.Add();
}
inline ::Proto3::MarketData::Depth* DepthQuote::add_bids() {
  // @@protoc_insertion_point(field_add:Proto3.MarketData.DepthQuote.bids)
  return _internal_add_bids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Depth >&
DepthQuote::bids() const {
  // @@protoc_insertion_point(field_list:Proto3.MarketData.DepthQuote.bids)
  return bids_;
}

// -------------------------------------------------------------------

// KlineData

// uint64 time = 1;
inline void KlineData::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KlineData::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KlineData::time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.KlineData.time)
  return _internal_time();
}
inline void KlineData::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void KlineData::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.KlineData.time)
}

// string exchange = 2;
inline void KlineData::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KlineData::exchange() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.KlineData.exchange)
  return _internal_exchange();
}
inline void KlineData::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.KlineData.exchange)
}
inline std::string* KlineData::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.KlineData.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& KlineData::_internal_exchange() const {
  return exchange_.Get();
}
inline void KlineData::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KlineData::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.KlineData.exchange)
}
inline void KlineData::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.KlineData.exchange)
}
inline void KlineData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.KlineData.exchange)
}
inline std::string* KlineData::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KlineData::release_exchange() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.KlineData.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KlineData::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.KlineData.exchange)
}

// string symbol = 3;
inline void KlineData::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KlineData::symbol() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.KlineData.symbol)
  return _internal_symbol();
}
inline void KlineData::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.KlineData.symbol)
}
inline std::string* KlineData::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.KlineData.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& KlineData::_internal_symbol() const {
  return symbol_.Get();
}
inline void KlineData::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KlineData::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.KlineData.symbol)
}
inline void KlineData::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.KlineData.symbol)
}
inline void KlineData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.KlineData.symbol)
}
inline std::string* KlineData::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KlineData::release_symbol() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.KlineData.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KlineData::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.KlineData.symbol)
}

// .Proto3.MarketData.Decimal px_open = 4;
inline bool KlineData::_internal_has_px_open() const {
  return this != internal_default_instance() && px_open_ != nullptr;
}
inline bool KlineData::has_px_open() const {
  return _internal_has_px_open();
}
inline void KlineData::clear_px_open() {
  if (GetArena() == nullptr && px_open_ != nullptr) {
    delete px_open_;
  }
  px_open_ = nullptr;
}
inline const ::Proto3::MarketData::Decimal& KlineData::_internal_px_open() const {
  const ::Proto3::MarketData::Decimal* p = px_open_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto3::MarketData::Decimal*>(
      &::Proto3::MarketData::_Decimal_default_instance_);
}
inline const ::Proto3::MarketData::Decimal& KlineData::px_open() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.KlineData.px_open)
  return _internal_px_open();
}
inline void KlineData::unsafe_arena_set_allocated_px_open(
    ::Proto3::MarketData::Decimal* px_open) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(px_open_);
  }
  px_open_ = px_open;
  if (px_open) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.KlineData.px_open)
}
inline ::Proto3::MarketData::Decimal* KlineData::release_px_open() {
  
  ::Proto3::MarketData::Decimal* temp = px_open_;
  px_open_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::unsafe_arena_release_px_open() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.KlineData.px_open)
  
  ::Proto3::MarketData::Decimal* temp = px_open_;
  px_open_ = nullptr;
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::_internal_mutable_px_open() {
  
  if (px_open_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto3::MarketData::Decimal>(GetArena());
    px_open_ = p;
  }
  return px_open_;
}
inline ::Proto3::MarketData::Decimal* KlineData::mutable_px_open() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.KlineData.px_open)
  return _internal_mutable_px_open();
}
inline void KlineData::set_allocated_px_open(::Proto3::MarketData::Decimal* px_open) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete px_open_;
  }
  if (px_open) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(px_open);
    if (message_arena != submessage_arena) {
      px_open = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, px_open, submessage_arena);
    }
    
  } else {
    
  }
  px_open_ = px_open;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.KlineData.px_open)
}

// .Proto3.MarketData.Decimal px_high = 5;
inline bool KlineData::_internal_has_px_high() const {
  return this != internal_default_instance() && px_high_ != nullptr;
}
inline bool KlineData::has_px_high() const {
  return _internal_has_px_high();
}
inline void KlineData::clear_px_high() {
  if (GetArena() == nullptr && px_high_ != nullptr) {
    delete px_high_;
  }
  px_high_ = nullptr;
}
inline const ::Proto3::MarketData::Decimal& KlineData::_internal_px_high() const {
  const ::Proto3::MarketData::Decimal* p = px_high_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto3::MarketData::Decimal*>(
      &::Proto3::MarketData::_Decimal_default_instance_);
}
inline const ::Proto3::MarketData::Decimal& KlineData::px_high() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.KlineData.px_high)
  return _internal_px_high();
}
inline void KlineData::unsafe_arena_set_allocated_px_high(
    ::Proto3::MarketData::Decimal* px_high) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(px_high_);
  }
  px_high_ = px_high;
  if (px_high) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.KlineData.px_high)
}
inline ::Proto3::MarketData::Decimal* KlineData::release_px_high() {
  
  ::Proto3::MarketData::Decimal* temp = px_high_;
  px_high_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::unsafe_arena_release_px_high() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.KlineData.px_high)
  
  ::Proto3::MarketData::Decimal* temp = px_high_;
  px_high_ = nullptr;
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::_internal_mutable_px_high() {
  
  if (px_high_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto3::MarketData::Decimal>(GetArena());
    px_high_ = p;
  }
  return px_high_;
}
inline ::Proto3::MarketData::Decimal* KlineData::mutable_px_high() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.KlineData.px_high)
  return _internal_mutable_px_high();
}
inline void KlineData::set_allocated_px_high(::Proto3::MarketData::Decimal* px_high) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete px_high_;
  }
  if (px_high) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(px_high);
    if (message_arena != submessage_arena) {
      px_high = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, px_high, submessage_arena);
    }
    
  } else {
    
  }
  px_high_ = px_high;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.KlineData.px_high)
}

// .Proto3.MarketData.Decimal px_low = 6;
inline bool KlineData::_internal_has_px_low() const {
  return this != internal_default_instance() && px_low_ != nullptr;
}
inline bool KlineData::has_px_low() const {
  return _internal_has_px_low();
}
inline void KlineData::clear_px_low() {
  if (GetArena() == nullptr && px_low_ != nullptr) {
    delete px_low_;
  }
  px_low_ = nullptr;
}
inline const ::Proto3::MarketData::Decimal& KlineData::_internal_px_low() const {
  const ::Proto3::MarketData::Decimal* p = px_low_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto3::MarketData::Decimal*>(
      &::Proto3::MarketData::_Decimal_default_instance_);
}
inline const ::Proto3::MarketData::Decimal& KlineData::px_low() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.KlineData.px_low)
  return _internal_px_low();
}
inline void KlineData::unsafe_arena_set_allocated_px_low(
    ::Proto3::MarketData::Decimal* px_low) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(px_low_);
  }
  px_low_ = px_low;
  if (px_low) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.KlineData.px_low)
}
inline ::Proto3::MarketData::Decimal* KlineData::release_px_low() {
  
  ::Proto3::MarketData::Decimal* temp = px_low_;
  px_low_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::unsafe_arena_release_px_low() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.KlineData.px_low)
  
  ::Proto3::MarketData::Decimal* temp = px_low_;
  px_low_ = nullptr;
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::_internal_mutable_px_low() {
  
  if (px_low_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto3::MarketData::Decimal>(GetArena());
    px_low_ = p;
  }
  return px_low_;
}
inline ::Proto3::MarketData::Decimal* KlineData::mutable_px_low() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.KlineData.px_low)
  return _internal_mutable_px_low();
}
inline void KlineData::set_allocated_px_low(::Proto3::MarketData::Decimal* px_low) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete px_low_;
  }
  if (px_low) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(px_low);
    if (message_arena != submessage_arena) {
      px_low = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, px_low, submessage_arena);
    }
    
  } else {
    
  }
  px_low_ = px_low;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.KlineData.px_low)
}

// .Proto3.MarketData.Decimal px_close = 7;
inline bool KlineData::_internal_has_px_close() const {
  return this != internal_default_instance() && px_close_ != nullptr;
}
inline bool KlineData::has_px_close() const {
  return _internal_has_px_close();
}
inline void KlineData::clear_px_close() {
  if (GetArena() == nullptr && px_close_ != nullptr) {
    delete px_close_;
  }
  px_close_ = nullptr;
}
inline const ::Proto3::MarketData::Decimal& KlineData::_internal_px_close() const {
  const ::Proto3::MarketData::Decimal* p = px_close_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto3::MarketData::Decimal*>(
      &::Proto3::MarketData::_Decimal_default_instance_);
}
inline const ::Proto3::MarketData::Decimal& KlineData::px_close() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.KlineData.px_close)
  return _internal_px_close();
}
inline void KlineData::unsafe_arena_set_allocated_px_close(
    ::Proto3::MarketData::Decimal* px_close) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(px_close_);
  }
  px_close_ = px_close;
  if (px_close) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.KlineData.px_close)
}
inline ::Proto3::MarketData::Decimal* KlineData::release_px_close() {
  
  ::Proto3::MarketData::Decimal* temp = px_close_;
  px_close_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::unsafe_arena_release_px_close() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.KlineData.px_close)
  
  ::Proto3::MarketData::Decimal* temp = px_close_;
  px_close_ = nullptr;
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::_internal_mutable_px_close() {
  
  if (px_close_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto3::MarketData::Decimal>(GetArena());
    px_close_ = p;
  }
  return px_close_;
}
inline ::Proto3::MarketData::Decimal* KlineData::mutable_px_close() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.KlineData.px_close)
  return _internal_mutable_px_close();
}
inline void KlineData::set_allocated_px_close(::Proto3::MarketData::Decimal* px_close) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete px_close_;
  }
  if (px_close) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(px_close);
    if (message_arena != submessage_arena) {
      px_close = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, px_close, submessage_arena);
    }
    
  } else {
    
  }
  px_close_ = px_close;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.KlineData.px_close)
}

// .Proto3.MarketData.Decimal volume = 8;
inline bool KlineData::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool KlineData::has_volume() const {
  return _internal_has_volume();
}
inline void KlineData::clear_volume() {
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
inline const ::Proto3::MarketData::Decimal& KlineData::_internal_volume() const {
  const ::Proto3::MarketData::Decimal* p = volume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto3::MarketData::Decimal*>(
      &::Proto3::MarketData::_Decimal_default_instance_);
}
inline const ::Proto3::MarketData::Decimal& KlineData::volume() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.KlineData.volume)
  return _internal_volume();
}
inline void KlineData::unsafe_arena_set_allocated_volume(
    ::Proto3::MarketData::Decimal* volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.KlineData.volume)
}
inline ::Proto3::MarketData::Decimal* KlineData::release_volume() {
  
  ::Proto3::MarketData::Decimal* temp = volume_;
  volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.KlineData.volume)
  
  ::Proto3::MarketData::Decimal* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::Proto3::MarketData::Decimal* KlineData::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto3::MarketData::Decimal>(GetArena());
    volume_ = p;
  }
  return volume_;
}
inline ::Proto3::MarketData::Decimal* KlineData::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.KlineData.volume)
  return _internal_mutable_volume();
}
inline void KlineData::set_allocated_volume(::Proto3::MarketData::Decimal* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volume_;
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volume);
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.KlineData.volume)
}

// uint32 resolution = 9;
inline void KlineData::clear_resolution() {
  resolution_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KlineData::_internal_resolution() const {
  return resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KlineData::resolution() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.KlineData.resolution)
  return _internal_resolution();
}
inline void KlineData::_internal_set_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  resolution_ = value;
}
inline void KlineData::set_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.KlineData.resolution)
}

// -------------------------------------------------------------------

// TradeData

// uint64 time = 1;
inline void TradeData::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeData::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeData::time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.TradeData.time)
  return _internal_time();
}
inline void TradeData::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void TradeData::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.TradeData.time)
}

// .Proto3.MarketData.Decimal price = 2;
inline bool TradeData::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool TradeData::has_price() const {
  return _internal_has_price();
}
inline void TradeData::clear_price() {
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::Proto3::MarketData::Decimal& TradeData::_internal_price() const {
  const ::Proto3::MarketData::Decimal* p = price_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto3::MarketData::Decimal*>(
      &::Proto3::MarketData::_Decimal_default_instance_);
}
inline const ::Proto3::MarketData::Decimal& TradeData::price() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.TradeData.price)
  return _internal_price();
}
inline void TradeData::unsafe_arena_set_allocated_price(
    ::Proto3::MarketData::Decimal* price) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.TradeData.price)
}
inline ::Proto3::MarketData::Decimal* TradeData::release_price() {
  
  ::Proto3::MarketData::Decimal* temp = price_;
  price_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto3::MarketData::Decimal* TradeData::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.TradeData.price)
  
  ::Proto3::MarketData::Decimal* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::Proto3::MarketData::Decimal* TradeData::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto3::MarketData::Decimal>(GetArena());
    price_ = p;
  }
  return price_;
}
inline ::Proto3::MarketData::Decimal* TradeData::mutable_price() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.TradeData.price)
  return _internal_mutable_price();
}
inline void TradeData::set_allocated_price(::Proto3::MarketData::Decimal* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.TradeData.price)
}

// .Proto3.MarketData.Decimal volume = 3;
inline bool TradeData::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool TradeData::has_volume() const {
  return _internal_has_volume();
}
inline void TradeData::clear_volume() {
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
inline const ::Proto3::MarketData::Decimal& TradeData::_internal_volume() const {
  const ::Proto3::MarketData::Decimal* p = volume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto3::MarketData::Decimal*>(
      &::Proto3::MarketData::_Decimal_default_instance_);
}
inline const ::Proto3::MarketData::Decimal& TradeData::volume() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.TradeData.volume)
  return _internal_volume();
}
inline void TradeData::unsafe_arena_set_allocated_volume(
    ::Proto3::MarketData::Decimal* volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.TradeData.volume)
}
inline ::Proto3::MarketData::Decimal* TradeData::release_volume() {
  
  ::Proto3::MarketData::Decimal* temp = volume_;
  volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto3::MarketData::Decimal* TradeData::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.TradeData.volume)
  
  ::Proto3::MarketData::Decimal* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::Proto3::MarketData::Decimal* TradeData::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto3::MarketData::Decimal>(GetArena());
    volume_ = p;
  }
  return volume_;
}
inline ::Proto3::MarketData::Decimal* TradeData::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.TradeData.volume)
  return _internal_mutable_volume();
}
inline void TradeData::set_allocated_volume(::Proto3::MarketData::Decimal* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volume_;
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volume);
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.TradeData.volume)
}

// string symbol = 4;
inline void TradeData::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeData::symbol() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.TradeData.symbol)
  return _internal_symbol();
}
inline void TradeData::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.TradeData.symbol)
}
inline std::string* TradeData::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.TradeData.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeData::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeData::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeData::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.TradeData.symbol)
}
inline void TradeData::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.TradeData.symbol)
}
inline void TradeData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.TradeData.symbol)
}
inline std::string* TradeData::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeData::release_symbol() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.TradeData.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeData::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.TradeData.symbol)
}

// string exchange = 5;
inline void TradeData::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeData::exchange() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.TradeData.exchange)
  return _internal_exchange();
}
inline void TradeData::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.TradeData.exchange)
}
inline std::string* TradeData::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.TradeData.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& TradeData::_internal_exchange() const {
  return exchange_.Get();
}
inline void TradeData::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeData::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.TradeData.exchange)
}
inline void TradeData::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.TradeData.exchange)
}
inline void TradeData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.TradeData.exchange)
}
inline std::string* TradeData::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeData::release_exchange() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.TradeData.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeData::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.TradeData.exchange)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MarketData
}  // namespace Proto3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto

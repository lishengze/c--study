// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#include "market_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Depth_market_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Depth_VolumeByExchangesEntry_DoNotUse_market_5fdata_2eproto;
namespace Proto3 {
namespace MarketData {
class DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decimal> _instance;
} _Decimal_default_instance_;
class Depth_VolumeByExchangesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Depth_VolumeByExchangesEntry_DoNotUse> _instance;
} _Depth_VolumeByExchangesEntry_DoNotUse_default_instance_;
class DepthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Depth> _instance;
} _Depth_default_instance_;
class DepthQuoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthQuote> _instance;
} _DepthQuote_default_instance_;
class KlineDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KlineData> _instance;
} _KlineData_default_instance_;
class TradeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeData> _instance;
} _TradeData_default_instance_;
}  // namespace MarketData
}  // namespace Proto3
static void InitDefaultsscc_info_Decimal_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto3::MarketData::_Decimal_default_instance_;
    new (ptr) ::Proto3::MarketData::Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3::MarketData::Decimal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Decimal_market_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_Depth_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto3::MarketData::_Depth_default_instance_;
    new (ptr) ::Proto3::MarketData::Depth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3::MarketData::Depth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Depth_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Depth_market_5fdata_2eproto}, {
      &scc_info_Decimal_market_5fdata_2eproto.base,
      &scc_info_Depth_VolumeByExchangesEntry_DoNotUse_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_Depth_VolumeByExchangesEntry_DoNotUse_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto3::MarketData::_Depth_VolumeByExchangesEntry_DoNotUse_default_instance_;
    new (ptr) ::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse();
  }
  ::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Depth_VolumeByExchangesEntry_DoNotUse_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Depth_VolumeByExchangesEntry_DoNotUse_market_5fdata_2eproto}, {
      &scc_info_Decimal_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_DepthQuote_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto3::MarketData::_DepthQuote_default_instance_;
    new (ptr) ::Proto3::MarketData::DepthQuote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3::MarketData::DepthQuote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepthQuote_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DepthQuote_market_5fdata_2eproto}, {
      &scc_info_Depth_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_KlineData_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto3::MarketData::_KlineData_default_instance_;
    new (ptr) ::Proto3::MarketData::KlineData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3::MarketData::KlineData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KlineData_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KlineData_market_5fdata_2eproto}, {
      &scc_info_Decimal_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_TradeData_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto3::MarketData::_TradeData_default_instance_;
    new (ptr) ::Proto3::MarketData::TradeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3::MarketData::TradeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeData_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradeData_market_5fdata_2eproto}, {
      &scc_info_Decimal_market_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_market_5fdata_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_market_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_market_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_market_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Decimal, value_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Decimal, precise_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Depth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Depth, price_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Depth, volume_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::Depth, volume_by_exchanges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, exchange_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, symbol_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, sequence_no_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, origin_time_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, arrive_time_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, server_time_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, price_precise_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, volume_precise_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, amount_precise_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, is_snap_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, asks_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::DepthQuote, bids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, time_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, exchange_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, symbol_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, px_open_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, px_high_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, px_low_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, px_close_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, volume_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::KlineData, resolution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::TradeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::TradeData, time_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::TradeData, price_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::TradeData, volume_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::TradeData, symbol_),
  PROTOBUF_FIELD_OFFSET(::Proto3::MarketData::TradeData, exchange_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Proto3::MarketData::Decimal)},
  { 7, 14, sizeof(::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse)},
  { 16, -1, sizeof(::Proto3::MarketData::Depth)},
  { 24, -1, sizeof(::Proto3::MarketData::DepthQuote)},
  { 41, -1, sizeof(::Proto3::MarketData::KlineData)},
  { 55, -1, sizeof(::Proto3::MarketData::TradeData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto3::MarketData::_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto3::MarketData::_Depth_VolumeByExchangesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto3::MarketData::_Depth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto3::MarketData::_DepthQuote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto3::MarketData::_KlineData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto3::MarketData::_TradeData_default_instance_),
};

const char descriptor_table_protodef_market_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021market_data.proto\022\021Proto3.MarketData\")"
  "\n\007Decimal\022\r\n\005value\030\001 \001(\004\022\017\n\007precise\030\002 \001("
  "\r\"\202\002\n\005Depth\022)\n\005price\030\001 \001(\0132\032.Proto3.Mark"
  "etData.Decimal\022*\n\006volume\030\002 \001(\0132\032.Proto3."
  "MarketData.Decimal\022L\n\023volume_by_exchange"
  "s\030\003 \003(\0132/.Proto3.MarketData.Depth.Volume"
  "ByExchangesEntry\032T\n\026VolumeByExchangesEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.Proto3."
  "MarketData.Decimal:\0028\001\"\252\002\n\nDepthQuote\022\020\n"
  "\010exchange\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022\023\n\013seque"
  "nce_no\030\003 \001(\004\022\023\n\013origin_time\030\004 \001(\004\022\023\n\013arr"
  "ive_time\030\005 \001(\004\022\023\n\013server_time\030\006 \001(\004\022\025\n\rp"
  "rice_precise\030\007 \001(\r\022\026\n\016volume_precise\030\010 \001"
  "(\r\022\026\n\016amount_precise\030\t \001(\r\022\017\n\007is_snap\030\n "
  "\001(\010\022&\n\004asks\030\013 \003(\0132\030.Proto3.MarketData.De"
  "pth\022&\n\004bids\030\014 \003(\0132\030.Proto3.MarketData.De"
  "pth\"\257\002\n\tKlineData\022\014\n\004time\030\001 \001(\004\022\020\n\010excha"
  "nge\030\002 \001(\t\022\016\n\006symbol\030\003 \001(\t\022+\n\007px_open\030\004 \001"
  "(\0132\032.Proto3.MarketData.Decimal\022+\n\007px_hig"
  "h\030\005 \001(\0132\032.Proto3.MarketData.Decimal\022*\n\006p"
  "x_low\030\006 \001(\0132\032.Proto3.MarketData.Decimal\022"
  ",\n\010px_close\030\007 \001(\0132\032.Proto3.MarketData.De"
  "cimal\022*\n\006volume\030\010 \001(\0132\032.Proto3.MarketDat"
  "a.Decimal\022\022\n\nresolution\030\t \001(\r\"\222\001\n\tTradeD"
  "ata\022\014\n\004time\030\001 \001(\004\022)\n\005price\030\002 \001(\0132\032.Proto"
  "3.MarketData.Decimal\022*\n\006volume\030\003 \001(\0132\032.P"
  "roto3.MarketData.Decimal\022\016\n\006symbol\030\004 \001(\t"
  "\022\020\n\010exchange\030\005 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_market_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_market_5fdata_2eproto_sccs[6] = {
  &scc_info_Decimal_market_5fdata_2eproto.base,
  &scc_info_Depth_market_5fdata_2eproto.base,
  &scc_info_Depth_VolumeByExchangesEntry_DoNotUse_market_5fdata_2eproto.base,
  &scc_info_DepthQuote_market_5fdata_2eproto.base,
  &scc_info_KlineData_market_5fdata_2eproto.base,
  &scc_info_TradeData_market_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_market_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto = {
  false, false, descriptor_table_protodef_market_5fdata_2eproto, "market_data.proto", 1106,
  &descriptor_table_market_5fdata_2eproto_once, descriptor_table_market_5fdata_2eproto_sccs, descriptor_table_market_5fdata_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_market_5fdata_2eproto::offsets,
  file_level_metadata_market_5fdata_2eproto, 6, file_level_enum_descriptors_market_5fdata_2eproto, file_level_service_descriptors_market_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_market_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_market_5fdata_2eproto)), true);
namespace Proto3 {
namespace MarketData {

// ===================================================================

void Decimal::InitAsDefaultInstance() {
}
class Decimal::_Internal {
 public:
};

Decimal::Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3.MarketData.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&precise_) -
    reinterpret_cast<char*>(&value_)) + sizeof(precise_));
  // @@protoc_insertion_point(copy_constructor:Proto3.MarketData.Decimal)
}

void Decimal::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precise_) -
      reinterpret_cast<char*>(&value_)) + sizeof(precise_));
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:Proto3.MarketData.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Decimal::ArenaDtor(void* object) {
  Decimal* _this = reinterpret_cast< Decimal* >(object);
  (void)_this;
}
void Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal& Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decimal_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3.MarketData.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precise_) -
      reinterpret_cast<char*>(&value_)) + sizeof(precise_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 precise = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          precise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3.MarketData.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  // uint32 precise = 2;
  if (this->precise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_precise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3.MarketData.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3.MarketData.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  // uint32 precise = 2;
  if (this->precise() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_precise());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3.MarketData.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3.MarketData.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3.MarketData.Decimal)
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3.MarketData.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.precise() != 0) {
    _internal_set_precise(from._internal_precise());
  }
}

void Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3.MarketData.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3.MarketData.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decimal, precise_)
      + sizeof(Decimal::precise_)
      - PROTOBUF_FIELD_OFFSET(Decimal, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Depth_VolumeByExchangesEntry_DoNotUse::Depth_VolumeByExchangesEntry_DoNotUse() {}
Depth_VolumeByExchangesEntry_DoNotUse::Depth_VolumeByExchangesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Depth_VolumeByExchangesEntry_DoNotUse::MergeFrom(const Depth_VolumeByExchangesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Depth_VolumeByExchangesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Depth_VolumeByExchangesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Depth::InitAsDefaultInstance() {
  ::Proto3::MarketData::_Depth_default_instance_._instance.get_mutable()->price_ = const_cast< ::Proto3::MarketData::Decimal*>(
      ::Proto3::MarketData::Decimal::internal_default_instance());
  ::Proto3::MarketData::_Depth_default_instance_._instance.get_mutable()->volume_ = const_cast< ::Proto3::MarketData::Decimal*>(
      ::Proto3::MarketData::Decimal::internal_default_instance());
}
class Depth::_Internal {
 public:
  static const ::Proto3::MarketData::Decimal& price(const Depth* msg);
  static const ::Proto3::MarketData::Decimal& volume(const Depth* msg);
};

const ::Proto3::MarketData::Decimal&
Depth::_Internal::price(const Depth* msg) {
  return *msg->price_;
}
const ::Proto3::MarketData::Decimal&
Depth::_Internal::volume(const Depth* msg) {
  return *msg->volume_;
}
Depth::Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volume_by_exchanges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3.MarketData.Depth)
}
Depth::Depth(const Depth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_by_exchanges_.MergeFrom(from.volume_by_exchanges_);
  if (from._internal_has_price()) {
    price_ = new ::Proto3::MarketData::Decimal(*from.price_);
  } else {
    price_ = nullptr;
  }
  if (from._internal_has_volume()) {
    volume_ = new ::Proto3::MarketData::Decimal(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto3.MarketData.Depth)
}

void Depth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Depth_market_5fdata_2eproto.base);
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
}

Depth::~Depth() {
  // @@protoc_insertion_point(destructor:Proto3.MarketData.Depth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Depth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete volume_;
}

void Depth::ArenaDtor(void* object) {
  Depth* _this = reinterpret_cast< Depth* >(object);
  (void)_this;
}
void Depth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Depth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Depth& Depth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Depth_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Depth::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3.MarketData.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_by_exchanges_.Clear();
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Depth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto3.MarketData.Decimal price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3.MarketData.Decimal volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .Proto3.MarketData.Decimal> volume_by_exchanges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&volume_by_exchanges_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Depth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3.MarketData.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto3.MarketData.Decimal price = 1;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::price(this), target, stream);
  }

  // .Proto3.MarketData.Decimal volume = 2;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::volume(this), target, stream);
  }

  // map<string, .Proto3.MarketData.Decimal> volume_by_exchanges = 3;
  if (!this->_internal_volume_by_exchanges().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Proto3.MarketData.Depth.VolumeByExchangesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_volume_by_exchanges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_volume_by_exchanges().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >::const_iterator
          it = this->_internal_volume_by_exchanges().begin();
          it != this->_internal_volume_by_exchanges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Depth_VolumeByExchangesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >::const_iterator
          it = this->_internal_volume_by_exchanges().begin();
          it != this->_internal_volume_by_exchanges().end(); ++it) {
        target = Depth_VolumeByExchangesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3.MarketData.Depth)
  return target;
}

size_t Depth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3.MarketData.Depth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Proto3.MarketData.Decimal> volume_by_exchanges = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volume_by_exchanges_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto3::MarketData::Decimal >::const_iterator
      it = this->_internal_volume_by_exchanges().begin();
      it != this->_internal_volume_by_exchanges().end(); ++it) {
    total_size += Depth_VolumeByExchangesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .Proto3.MarketData.Decimal price = 1;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .Proto3.MarketData.Decimal volume = 2;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Depth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3.MarketData.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  const Depth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Depth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3.MarketData.Depth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3.MarketData.Depth)
    MergeFrom(*source);
  }
}

void Depth::MergeFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3.MarketData.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_by_exchanges_.MergeFrom(from.volume_by_exchanges_);
  if (from.has_price()) {
    _internal_mutable_price()->::Proto3::MarketData::Decimal::MergeFrom(from._internal_price());
  }
  if (from.has_volume()) {
    _internal_mutable_volume()->::Proto3::MarketData::Decimal::MergeFrom(from._internal_volume());
  }
}

void Depth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3.MarketData.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Depth::CopyFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3.MarketData.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Depth::IsInitialized() const {
  return true;
}

void Depth::InternalSwap(Depth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_by_exchanges_.Swap(&other->volume_by_exchanges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Depth, volume_)
      + sizeof(Depth::volume_)
      - PROTOBUF_FIELD_OFFSET(Depth, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Depth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepthQuote::InitAsDefaultInstance() {
}
class DepthQuote::_Internal {
 public:
};

DepthQuote::DepthQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  asks_(arena),
  bids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3.MarketData.DepthQuote)
}
DepthQuote::DepthQuote(const DepthQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      asks_(from.asks_),
      bids_(from.bids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange().empty()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&sequence_no_, &from.sequence_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_snap_) -
    reinterpret_cast<char*>(&sequence_no_)) + sizeof(is_snap_));
  // @@protoc_insertion_point(copy_constructor:Proto3.MarketData.DepthQuote)
}

void DepthQuote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepthQuote_market_5fdata_2eproto.base);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_snap_) -
      reinterpret_cast<char*>(&sequence_no_)) + sizeof(is_snap_));
}

DepthQuote::~DepthQuote() {
  // @@protoc_insertion_point(destructor:Proto3.MarketData.DepthQuote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepthQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepthQuote::ArenaDtor(void* object) {
  DepthQuote* _this = reinterpret_cast< DepthQuote* >(object);
  (void)_this;
}
void DepthQuote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepthQuote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthQuote& DepthQuote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthQuote_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void DepthQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3.MarketData.DepthQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asks_.Clear();
  bids_.Clear();
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sequence_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_snap_) -
      reinterpret_cast<char*>(&sequence_no_)) + sizeof(is_snap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepthQuote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3.MarketData.DepthQuote.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3.MarketData.DepthQuote.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 origin_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          origin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 arrive_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          arrive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 server_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 price_precise = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          price_precise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 volume_precise = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          volume_precise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 amount_precise = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          amount_precise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_snap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_snap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto3.MarketData.Depth asks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto3.MarketData.Depth bids = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthQuote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3.MarketData.DepthQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange = 1;
  if (this->exchange().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3.MarketData.DepthQuote.exchange");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exchange(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3.MarketData.DepthQuote.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // uint64 sequence_no = 3;
  if (this->sequence_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence_no(), target);
  }

  // uint64 origin_time = 4;
  if (this->origin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_origin_time(), target);
  }

  // uint64 arrive_time = 5;
  if (this->arrive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_arrive_time(), target);
  }

  // uint64 server_time = 6;
  if (this->server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_server_time(), target);
  }

  // uint32 price_precise = 7;
  if (this->price_precise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_price_precise(), target);
  }

  // uint32 volume_precise = 8;
  if (this->volume_precise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_volume_precise(), target);
  }

  // uint32 amount_precise = 9;
  if (this->amount_precise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_amount_precise(), target);
  }

  // bool is_snap = 10;
  if (this->is_snap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_snap(), target);
  }

  // repeated .Proto3.MarketData.Depth asks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_asks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_asks(i), target, stream);
  }

  // repeated .Proto3.MarketData.Depth bids = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_bids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3.MarketData.DepthQuote)
  return target;
}

size_t DepthQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3.MarketData.DepthQuote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto3.MarketData.Depth asks = 11;
  total_size += 1UL * this->_internal_asks_size();
  for (const auto& msg : this->asks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto3.MarketData.Depth bids = 12;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->bids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string exchange = 1;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // uint64 sequence_no = 3;
  if (this->sequence_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_no());
  }

  // uint64 origin_time = 4;
  if (this->origin_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_origin_time());
  }

  // uint64 arrive_time = 5;
  if (this->arrive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_arrive_time());
  }

  // uint64 server_time = 6;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_time());
  }

  // uint32 price_precise = 7;
  if (this->price_precise() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_price_precise());
  }

  // uint32 volume_precise = 8;
  if (this->volume_precise() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_volume_precise());
  }

  // uint32 amount_precise = 9;
  if (this->amount_precise() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_amount_precise());
  }

  // bool is_snap = 10;
  if (this->is_snap() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthQuote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3.MarketData.DepthQuote)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthQuote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthQuote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3.MarketData.DepthQuote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3.MarketData.DepthQuote)
    MergeFrom(*source);
  }
}

void DepthQuote::MergeFrom(const DepthQuote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3.MarketData.DepthQuote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  asks_.MergeFrom(from.asks_);
  bids_.MergeFrom(from.bids_);
  if (from.exchange().size() > 0) {
    _internal_set_exchange(from._internal_exchange());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.sequence_no() != 0) {
    _internal_set_sequence_no(from._internal_sequence_no());
  }
  if (from.origin_time() != 0) {
    _internal_set_origin_time(from._internal_origin_time());
  }
  if (from.arrive_time() != 0) {
    _internal_set_arrive_time(from._internal_arrive_time());
  }
  if (from.server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
  if (from.price_precise() != 0) {
    _internal_set_price_precise(from._internal_price_precise());
  }
  if (from.volume_precise() != 0) {
    _internal_set_volume_precise(from._internal_volume_precise());
  }
  if (from.amount_precise() != 0) {
    _internal_set_amount_precise(from._internal_amount_precise());
  }
  if (from.is_snap() != 0) {
    _internal_set_is_snap(from._internal_is_snap());
  }
}

void DepthQuote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3.MarketData.DepthQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthQuote::CopyFrom(const DepthQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3.MarketData.DepthQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthQuote::IsInitialized() const {
  return true;
}

void DepthQuote::InternalSwap(DepthQuote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asks_.InternalSwap(&other->asks_);
  bids_.InternalSwap(&other->bids_);
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepthQuote, is_snap_)
      + sizeof(DepthQuote::is_snap_)
      - PROTOBUF_FIELD_OFFSET(DepthQuote, sequence_no_)>(
          reinterpret_cast<char*>(&sequence_no_),
          reinterpret_cast<char*>(&other->sequence_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthQuote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KlineData::InitAsDefaultInstance() {
  ::Proto3::MarketData::_KlineData_default_instance_._instance.get_mutable()->px_open_ = const_cast< ::Proto3::MarketData::Decimal*>(
      ::Proto3::MarketData::Decimal::internal_default_instance());
  ::Proto3::MarketData::_KlineData_default_instance_._instance.get_mutable()->px_high_ = const_cast< ::Proto3::MarketData::Decimal*>(
      ::Proto3::MarketData::Decimal::internal_default_instance());
  ::Proto3::MarketData::_KlineData_default_instance_._instance.get_mutable()->px_low_ = const_cast< ::Proto3::MarketData::Decimal*>(
      ::Proto3::MarketData::Decimal::internal_default_instance());
  ::Proto3::MarketData::_KlineData_default_instance_._instance.get_mutable()->px_close_ = const_cast< ::Proto3::MarketData::Decimal*>(
      ::Proto3::MarketData::Decimal::internal_default_instance());
  ::Proto3::MarketData::_KlineData_default_instance_._instance.get_mutable()->volume_ = const_cast< ::Proto3::MarketData::Decimal*>(
      ::Proto3::MarketData::Decimal::internal_default_instance());
}
class KlineData::_Internal {
 public:
  static const ::Proto3::MarketData::Decimal& px_open(const KlineData* msg);
  static const ::Proto3::MarketData::Decimal& px_high(const KlineData* msg);
  static const ::Proto3::MarketData::Decimal& px_low(const KlineData* msg);
  static const ::Proto3::MarketData::Decimal& px_close(const KlineData* msg);
  static const ::Proto3::MarketData::Decimal& volume(const KlineData* msg);
};

const ::Proto3::MarketData::Decimal&
KlineData::_Internal::px_open(const KlineData* msg) {
  return *msg->px_open_;
}
const ::Proto3::MarketData::Decimal&
KlineData::_Internal::px_high(const KlineData* msg) {
  return *msg->px_high_;
}
const ::Proto3::MarketData::Decimal&
KlineData::_Internal::px_low(const KlineData* msg) {
  return *msg->px_low_;
}
const ::Proto3::MarketData::Decimal&
KlineData::_Internal::px_close(const KlineData* msg) {
  return *msg->px_close_;
}
const ::Proto3::MarketData::Decimal&
KlineData::_Internal::volume(const KlineData* msg) {
  return *msg->volume_;
}
KlineData::KlineData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3.MarketData.KlineData)
}
KlineData::KlineData(const KlineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange().empty()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  if (from._internal_has_px_open()) {
    px_open_ = new ::Proto3::MarketData::Decimal(*from.px_open_);
  } else {
    px_open_ = nullptr;
  }
  if (from._internal_has_px_high()) {
    px_high_ = new ::Proto3::MarketData::Decimal(*from.px_high_);
  } else {
    px_high_ = nullptr;
  }
  if (from._internal_has_px_low()) {
    px_low_ = new ::Proto3::MarketData::Decimal(*from.px_low_);
  } else {
    px_low_ = nullptr;
  }
  if (from._internal_has_px_close()) {
    px_close_ = new ::Proto3::MarketData::Decimal(*from.px_close_);
  } else {
    px_close_ = nullptr;
  }
  if (from._internal_has_volume()) {
    volume_ = new ::Proto3::MarketData::Decimal(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolution_) -
    reinterpret_cast<char*>(&time_)) + sizeof(resolution_));
  // @@protoc_insertion_point(copy_constructor:Proto3.MarketData.KlineData)
}

void KlineData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KlineData_market_5fdata_2eproto.base);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&px_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&px_open_)) + sizeof(resolution_));
}

KlineData::~KlineData() {
  // @@protoc_insertion_point(destructor:Proto3.MarketData.KlineData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KlineData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete px_open_;
  if (this != internal_default_instance()) delete px_high_;
  if (this != internal_default_instance()) delete px_low_;
  if (this != internal_default_instance()) delete px_close_;
  if (this != internal_default_instance()) delete volume_;
}

void KlineData::ArenaDtor(void* object) {
  KlineData* _this = reinterpret_cast< KlineData* >(object);
  (void)_this;
}
void KlineData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KlineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KlineData& KlineData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KlineData_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void KlineData::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3.MarketData.KlineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && px_open_ != nullptr) {
    delete px_open_;
  }
  px_open_ = nullptr;
  if (GetArena() == nullptr && px_high_ != nullptr) {
    delete px_high_;
  }
  px_high_ = nullptr;
  if (GetArena() == nullptr && px_low_ != nullptr) {
    delete px_low_;
  }
  px_low_ = nullptr;
  if (GetArena() == nullptr && px_close_ != nullptr) {
    delete px_close_;
  }
  px_close_ = nullptr;
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&time_)) + sizeof(resolution_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KlineData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3.MarketData.KlineData.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3.MarketData.KlineData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3.MarketData.Decimal px_open = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_px_open(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3.MarketData.Decimal px_high = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_px_high(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3.MarketData.Decimal px_low = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_px_low(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3.MarketData.Decimal px_close = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_px_close(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3.MarketData.Decimal volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 resolution = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KlineData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3.MarketData.KlineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time(), target);
  }

  // string exchange = 2;
  if (this->exchange().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3.MarketData.KlineData.exchange");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exchange(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3.MarketData.KlineData.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // .Proto3.MarketData.Decimal px_open = 4;
  if (this->has_px_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::px_open(this), target, stream);
  }

  // .Proto3.MarketData.Decimal px_high = 5;
  if (this->has_px_high()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::px_high(this), target, stream);
  }

  // .Proto3.MarketData.Decimal px_low = 6;
  if (this->has_px_low()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::px_low(this), target, stream);
  }

  // .Proto3.MarketData.Decimal px_close = 7;
  if (this->has_px_close()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::px_close(this), target, stream);
  }

  // .Proto3.MarketData.Decimal volume = 8;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::volume(this), target, stream);
  }

  // uint32 resolution = 9;
  if (this->resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3.MarketData.KlineData)
  return target;
}

size_t KlineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3.MarketData.KlineData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // .Proto3.MarketData.Decimal px_open = 4;
  if (this->has_px_open()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *px_open_);
  }

  // .Proto3.MarketData.Decimal px_high = 5;
  if (this->has_px_high()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *px_high_);
  }

  // .Proto3.MarketData.Decimal px_low = 6;
  if (this->has_px_low()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *px_low_);
  }

  // .Proto3.MarketData.Decimal px_close = 7;
  if (this->has_px_close()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *px_close_);
  }

  // .Proto3.MarketData.Decimal volume = 8;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time());
  }

  // uint32 resolution = 9;
  if (this->resolution() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resolution());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KlineData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3.MarketData.KlineData)
  GOOGLE_DCHECK_NE(&from, this);
  const KlineData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KlineData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3.MarketData.KlineData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3.MarketData.KlineData)
    MergeFrom(*source);
  }
}

void KlineData::MergeFrom(const KlineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3.MarketData.KlineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchange().size() > 0) {
    _internal_set_exchange(from._internal_exchange());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.has_px_open()) {
    _internal_mutable_px_open()->::Proto3::MarketData::Decimal::MergeFrom(from._internal_px_open());
  }
  if (from.has_px_high()) {
    _internal_mutable_px_high()->::Proto3::MarketData::Decimal::MergeFrom(from._internal_px_high());
  }
  if (from.has_px_low()) {
    _internal_mutable_px_low()->::Proto3::MarketData::Decimal::MergeFrom(from._internal_px_low());
  }
  if (from.has_px_close()) {
    _internal_mutable_px_close()->::Proto3::MarketData::Decimal::MergeFrom(from._internal_px_close());
  }
  if (from.has_volume()) {
    _internal_mutable_volume()->::Proto3::MarketData::Decimal::MergeFrom(from._internal_volume());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.resolution() != 0) {
    _internal_set_resolution(from._internal_resolution());
  }
}

void KlineData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3.MarketData.KlineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KlineData::CopyFrom(const KlineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3.MarketData.KlineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KlineData::IsInitialized() const {
  return true;
}

void KlineData::InternalSwap(KlineData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KlineData, resolution_)
      + sizeof(KlineData::resolution_)
      - PROTOBUF_FIELD_OFFSET(KlineData, px_open_)>(
          reinterpret_cast<char*>(&px_open_),
          reinterpret_cast<char*>(&other->px_open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KlineData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeData::InitAsDefaultInstance() {
  ::Proto3::MarketData::_TradeData_default_instance_._instance.get_mutable()->price_ = const_cast< ::Proto3::MarketData::Decimal*>(
      ::Proto3::MarketData::Decimal::internal_default_instance());
  ::Proto3::MarketData::_TradeData_default_instance_._instance.get_mutable()->volume_ = const_cast< ::Proto3::MarketData::Decimal*>(
      ::Proto3::MarketData::Decimal::internal_default_instance());
}
class TradeData::_Internal {
 public:
  static const ::Proto3::MarketData::Decimal& price(const TradeData* msg);
  static const ::Proto3::MarketData::Decimal& volume(const TradeData* msg);
};

const ::Proto3::MarketData::Decimal&
TradeData::_Internal::price(const TradeData* msg) {
  return *msg->price_;
}
const ::Proto3::MarketData::Decimal&
TradeData::_Internal::volume(const TradeData* msg) {
  return *msg->volume_;
}
TradeData::TradeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3.MarketData.TradeData)
}
TradeData::TradeData(const TradeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange().empty()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  if (from._internal_has_price()) {
    price_ = new ::Proto3::MarketData::Decimal(*from.price_);
  } else {
    price_ = nullptr;
  }
  if (from._internal_has_volume()) {
    volume_ = new ::Proto3::MarketData::Decimal(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Proto3.MarketData.TradeData)
}

void TradeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeData_market_5fdata_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&price_)) + sizeof(time_));
}

TradeData::~TradeData() {
  // @@protoc_insertion_point(destructor:Proto3.MarketData.TradeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete volume_;
}

void TradeData::ArenaDtor(void* object) {
  TradeData* _this = reinterpret_cast< TradeData* >(object);
  (void)_this;
}
void TradeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeData& TradeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeData_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3.MarketData.TradeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  time_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3.MarketData.Decimal price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3.MarketData.Decimal volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3.MarketData.TradeData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3.MarketData.TradeData.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3.MarketData.TradeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time(), target);
  }

  // .Proto3.MarketData.Decimal price = 2;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::price(this), target, stream);
  }

  // .Proto3.MarketData.Decimal volume = 3;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::volume(this), target, stream);
  }

  // string symbol = 4;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3.MarketData.TradeData.symbol");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_symbol(), target);
  }

  // string exchange = 5;
  if (this->exchange().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3.MarketData.TradeData.exchange");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_exchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3.MarketData.TradeData)
  return target;
}

size_t TradeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3.MarketData.TradeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 4;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string exchange = 5;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // .Proto3.MarketData.Decimal price = 2;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .Proto3.MarketData.Decimal volume = 3;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3.MarketData.TradeData)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3.MarketData.TradeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3.MarketData.TradeData)
    MergeFrom(*source);
  }
}

void TradeData::MergeFrom(const TradeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3.MarketData.TradeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.exchange().size() > 0) {
    _internal_set_exchange(from._internal_exchange());
  }
  if (from.has_price()) {
    _internal_mutable_price()->::Proto3::MarketData::Decimal::MergeFrom(from._internal_price());
  }
  if (from.has_volume()) {
    _internal_mutable_volume()->::Proto3::MarketData::Decimal::MergeFrom(from._internal_volume());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void TradeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3.MarketData.TradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeData::CopyFrom(const TradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3.MarketData.TradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeData::IsInitialized() const {
  return true;
}

void TradeData::InternalSwap(TradeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeData, time_)
      + sizeof(TradeData::time_)
      - PROTOBUF_FIELD_OFFSET(TradeData, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MarketData
}  // namespace Proto3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto3::MarketData::Decimal* Arena::CreateMaybeMessage< ::Proto3::MarketData::Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3::MarketData::Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse* Arena::CreateMaybeMessage< ::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3::MarketData::Depth_VolumeByExchangesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3::MarketData::Depth* Arena::CreateMaybeMessage< ::Proto3::MarketData::Depth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3::MarketData::Depth >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3::MarketData::DepthQuote* Arena::CreateMaybeMessage< ::Proto3::MarketData::DepthQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3::MarketData::DepthQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3::MarketData::KlineData* Arena::CreateMaybeMessage< ::Proto3::MarketData::KlineData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3::MarketData::KlineData >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3::MarketData::TradeData* Arena::CreateMaybeMessage< ::Proto3::MarketData::TradeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3::MarketData::TradeData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
